buildscript {
  project.ext {
    if (has('privateRepoDir')) {
      privateRepoDir = privateRepoDir instanceof File ? privateRepoDir.path : privateRepoDir.toString()
      if (!new File(privateRepoDir).isAbsolute())
        privateRepoDir = new File(projectDir, privateRepoDir).canonicalPath
    } else
      privateRepoDir = new File(project.buildDir, 'privateRepo').canonicalPath
  }
}

import groovyx.net.http.ContentType

plugins {
  id 'base'
  id 'maven-publish'
}

apply plugin: 'com.jfrog.artifactory'
apply plugin: "org.tenne.rest"

ext {
  project_website = "https://github.com/${developerId}/${projectId}"
  project_scm = "https://github.com/${developerId}/${projectId}.git"
  license_url = "https://raw.github.com/${developerId}/${projectId}/master/LICENSE"

  if (!has('bintrayUser'))
    bintrayUser = ''

  if (!has('bintrayUserOrg'))
    bintrayUserOrg = ''

  if (!has('bintrayKey'))
    bintrayKey = ''

  if (!has('bintrayRepo'))
    bintrayRepo = ''

  if (!has('bintrayPackage'))
    bintrayPackage = ''

  bintrayGpgRequestBody = [:]

  if (!has('bintraySubject'))
    bintraySubject = ''
  else
    bintrayGpgRequestBody.put('subject', bintraySubject)

  if (!has( 'gpgPassphrase'))
    gpgPassphrase = ''
  else
    bintrayGpgRequestBody.put('passphrase', gpgPassphrase)

  if (!has('gpgKey'))
    gpgKey = ''
  else
    bintrayGpgRequestBody.put('private_key', gpgKey)

  if (!has('bintrayDryRun'))
    bintrayDryRun = false

  if (!has('artifactory_contextUrl'))
    artifactory_contextUrl = 'https://oss.jfrog.org/artifactory'
}

if (!bintrayDryRun)
  task bintraySign(type: org._10ne.gradle.rest.RestTask) {
    description 'Push to bintray and sign it.'
    httpMethod = 'post'
    uri = "https://api.bintray.com/gpg/${project.bintrayUser}/${project.bintrayRepo}/${project.bintrayPackage}/versions/${project.version}"
    username = project.bintrayUser
    password = project.bintrayKey
    requestBody = project.bintrayGpgRequestBody
    contentType = ContentType.JSON
  }

//task testAll(dependsOn: tasks.build)
//
//task testAllIntegrationTests(type: GradleBuild) {
//  dir = file('integrationTests')
//  tasks = [ 'testAll' ]
//  startParameter.projectProperties = [:]
//  if (project.hasProperty('geckoDriverPlatform')) {
//    startParameter.projectProperties.put('geckoDriverPlatform', project.geckoDriverPlatform)
//  }
//  if (project.hasProperty('geckoDriverVersion')) {
//    startParameter.projectProperties.put('geckoDriverVersion', project.geckoDriverVersion)
//  }
//  if (project.hasProperty('seleniumVersion')) {
//    startParameter.projectProperties.put('seleniumVersion', project.seleniumVersion)
//  }
//  if (project.hasProperty('gebVersion')) {
//    startParameter.projectProperties.put('gebVersion', project.gebVersion)
//  }
//  if (project.hasProperty('testAllContainers')) {
//    startParameter.projectProperties.put('testAllContainers', project.testAllContainers)
//  }
//  project.tasks.testAll.finalizedBy it
//  onlyIf { !project.tasks.testAll.getState().getFailure() }
//}
//
//task cleanIntegrationTests(type: GradleBuild) {
//  dir = file('integrationTests')
//  tasks = [ 'clean' ]
//  project.tasks.clean.dependsOn it
//}

artifactory {
  contextUrl = artifactory_contextUrl
  publish {
    repository {
      if (project.version.endsWith('-SNAPSHOT'))
        repoKey = 'oss-snapshot-local'
      else
        repoKey = 'oss-release-local'
      username = project.bintrayUser
      password = project.bintrayKey
    }
  }
  resolve {
    repository {
      repoKey = 'repo'
    }
  }
}

ext.libs = [
  spock: dependencies.create("org.spockframework:spock-core:$spock_version") {
    exclude module: "groovy-all"
  }
]


if(JavaVersion.current().isJava9Compatible()) {
  allprojects {
    tasks.withType(JavaCompile) {
      options.release.set(8)
    }
  }
}

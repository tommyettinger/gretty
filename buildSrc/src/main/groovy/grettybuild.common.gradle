plugins {
    id 'java-library'
    id 'groovy'
    id 'maven-publish'
    id 'com.jfrog.artifactory'
    id 'com.jfrog.bintray'
}

repositories {
    maven {
        url "file:${project.property("privateRepoDir")}"
    }
    mavenCentral()
}

group = rootProject.group
version = rootProject.version

configurations {
    providedCompile
    api.extendsFrom providedCompile
}

compileGroovy {
    groovyOptions.configurationScript = file("${rootProject.projectDir}/gradle/config.groovy")
}

ext.configurePublications = { String publicationName ->
    String capitalizedPublicationName = publicationName.capitalize()

    def thisProject = project

    publishing {
        publications.named(publicationName, MavenPublication) {
            pom {
                packaging = 'jar'
                description = thisProject.description
                url = thisProject.project_website

                scm {
                    url = thisProject.project_scm
                    connection = thisProject.project_scm
                    developerConnection = thisProject.project_scm
                }

                licenses {
                    license {
                        name = thisProject.license
                        url = thisProject.license_url
                        distribution = 'repo'
                    }
                }

                developers {
                    developer {
                        id = thisProject.developerId
                        name = thisProject.developerName
                    }
                }
            }
        }
    }

    project.task('publishToPrivateRepository') {
        dependsOn "publish${capitalizedPublicationName}PublicationToPrivateRepository"
    }
    project.tasks.build.dependsOn project.tasks.publishToPrivateRepository
//    rootProject.tasks.testAllIntegrationTests.dependsOn project.tasks.publishToPrivateRepository

    tasks.artifactoryPublish {
        dependsOn { project.tasks."generatePomFileFor${capitalizedPublicationName}Publication" }
        publications publicationName
    }

    bintray {
        user = project.bintrayUser
        key = project.bintrayKey
        publications = [publicationName]
        pkg {
            repo = thisProject.bintrayRepo
            userOrg = thisProject.bintrayUserOrg
            name = thisProject.bintrayPackage
            desc = thisProject.description
            licenses = [ thisProject.license ]
            vcsUrl = thisProject.project_scm
            labels = thisProject.projectLabels.split(',')
            version {
                name = thisProject.version
                vcsTag = thisProject.version
                gpg {
                    sign = true
                    passphrase = thisProject.gpgPassphrase
                }
            }
        }
        dryRun = thisProject.bintrayDryRun
    }

    tasks.bintrayUpload.dependsOn assemble

    if (!bintrayDryRun && gpgPassphrase) {
        tasks.bintrayUpload.finalizedBy rootProject.tasks.bintraySign
        rootProject.tasks.bintraySign.onlyIf { !tasks.bintrayUpload.getState().getFailure() }
    }
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

java {
    withJavadocJar()
    withSourcesJar()
}

tasks.named("javadocJar", Jar).configure {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    def groovydocTask = tasks.groovydoc
    dependsOn groovydocTask
    from groovydocTask.destinationDir
}

afterEvaluate {
    dependencies {
        testImplementation libs.spock
    }

    publishing {
        repositories {
            maven {
                name 'private'
                url "file:/${project.rootProject.ext.privateRepoDir}"
            }
        }
    }
} // afterEvaluate
